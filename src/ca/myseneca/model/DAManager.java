/**
 * @CourseCode CJV805SAA.03567.2191
 * @Title Assignment 1
 * @author Pei Zhang
 * @Professor Tevin Apenteng
 * @Submission date Feb 07, 2019
 */

package ca.myseneca.model;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.InvalidPropertiesFormatException;
import java.util.stream.IntStream;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleResultSet;
import oracle.jdbc.OracleTypes;

public class DAManager {

	// The security method for user login:
	// You should call the PL/SQL function F_SECURITY in the P_SECURITY package; the
	// method will return a 0 value for unauthorized user.

	public static int getEmployeeID(String user, String password) {

		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		CallableStatement cstmt = null;
		ResultSet rs = null;

		// integer which will be returned
		int empid = 0;
		try {
			// create JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// create statement
			String sql = "{? = call p_security.f_security(?,?)}";
			cstmt = conn.prepareCall(sql);
			cstmt.registerOutParameter(1, Types.INTEGER);
			cstmt.setString(2, user);
			cstmt.setString(3, password);
			cstmt.execute();
			// Print warning if there is any
			JDBCUtilities.printWarnings(cstmt.getWarnings());
			empid = cstmt.getInt(1);

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (cstmt != null)
					cstmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

		// return the employee id
		return empid;
	}

	// The methods of CRUD (create, read, update and delete) operations for the
	// Employees tables.

	public static void addEmployee(Employee emp) {
		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// Creating JDBCUtilities object which read the database connection and login
			// Information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// Creating prepared sql statement for insert record
			// The employee_id will be generated by the sequence in RDBMS,
			// The hire_date will be the system date on the day when adding employees
			String sql = "INSERT INTO employees ("
					+ "EMPLOYEE_ID,"
					+ "FIRST_NAME,"
					+ "LAST_NAME,"
					+ "EMAIL,"
					+ "PHONE_NUMBER,"
					+ "HIRE_DATE,"
					+ "JOB_ID,"
					+ "SALARY,"
					+ "COMMISSION_PCT,"
					+ "MANAGER_ID,"
					+ "DEPARTMENT_ID )"
					+ "VALUES (employees_seq.NEXTVAL,?,?,?,?,sysdate,?,?,?,?,?)";

			stmt = conn.prepareStatement(sql);
			stmt.setString(1, emp.getFirstName());
			stmt.setString(2, emp.getLastName());
			stmt.setString(3, emp.getEmail());
			stmt.setString(4, emp.getPhoneNumber());
			stmt.setString(5, emp.getJobId());
			if (emp.getSalary() == 0) {
				stmt.setNull(6, Types.DOUBLE);
			} else {
				stmt.setDouble(6, emp.getSalary());
			}
			if (emp.getCommission() == 0) {
				stmt.setNull(7, Types.DOUBLE);
			} else {
				stmt.setDouble(7, emp.getCommission());
			}
			if (emp.getManagerId() == 0) {
				stmt.setNull(8, Types.INTEGER);
			} else {
				stmt.setInt(8, emp.getManagerId());
			}
			if (emp.getDepartment_id() == 0) {
				stmt.setNull(9, Types.INTEGER);
			} else {
				stmt.setInt(9, emp.getDepartment_id());
			}
			int nRows = stmt.executeUpdate();
			// Print warning if there is any
			JDBCUtilities.printWarnings(stmt.getWarnings());
			if (nRows == 1) {
				System.out.println("---------------------------");
				System.out.println(nRows + " rows inserted");

			} else {
				System.out.println("---------------------------");
				System.err.println("No rows inserted");
			}

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLIntegrityConstraintViolationException e) {

			System.err.println(e.getMessage());

		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

	}

	public static ArrayList<Employee> getAllEmployees() {

		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;

		// Declare the arrayList
		ArrayList<Employee> empList = new ArrayList<>();

		try {
			// create JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// create statement
			String sql = "SELECT * FROM employees order by employee_id";
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);

			while (rs.next()) {
				Employee emp = new Employee();

				emp.setEmployeeId(rs.getInt(1));

				emp.setFirstName(rs.getString(2));
				if (rs.wasNull())
					emp.setFirstName("");
				emp.setLastName(rs.getString(3));

				emp.setEmail(rs.getString(4));

				emp.setPhoneNumber(rs.getString(5));
				if (rs.wasNull())
					emp.setPhoneNumber("empty");
				emp.setHireDate(rs.getDate(6));

				emp.setJobId(rs.getString(7));

				emp.setSalary(rs.getDouble(8));

				emp.setCommission(rs.getDouble(9));

				emp.setManagerId(rs.getInt(10));

				emp.setDepartment_id(rs.getInt(11));

				empList.add(emp);
			}

			// Print warning if there is any
			JDBCUtilities.printWarnings(stmt.getWarnings());

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

		return empList;
	}

	public static ArrayList<Employee> getEmployeesByDepartmentID(int depid) {
		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		// Declare the arrayList
		ArrayList<Employee> empList = new ArrayList<>();

		try {
			// create JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// create statement
			String sql = "SELECT * FROM employees WHERE department_id = ? ORDER BY employee_id";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, depid);
			rs = stmt.executeQuery();

			while (rs.next()) {
				Employee emp = new Employee();

				emp.setEmployeeId(rs.getInt(1));

				emp.setFirstName(rs.getString(2));
				if (rs.wasNull())
					emp.setFirstName("");
				emp.setLastName(rs.getString(3));

				emp.setEmail(rs.getString(4));

				emp.setPhoneNumber(rs.getString(5));
				if (rs.wasNull())
					emp.setPhoneNumber("empty");
				emp.setHireDate(rs.getDate(6));

				emp.setJobId(rs.getString(7));

				emp.setSalary(rs.getDouble(8));

				emp.setCommission(rs.getDouble(9));

				emp.setManagerId(rs.getInt(10));

				emp.setDepartment_id(rs.getInt(11));

				empList.add(emp);
			}

			// Print warning if there is any
			JDBCUtilities.printWarnings(stmt.getWarnings());

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

		return empList;

	}

	// To implement the getEmployeeID method, you should call the stored procedure
	// P_EMP_INFO in the P_SECURITY package.
	public static Employee getEmployeeByID(int empid) {
		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		OracleCallableStatement ocstmt = null;
		OracleResultSet ors = null;

		// Declare the Employee object
		Employee emp = new Employee();
		try {
			// create JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// create statement
			String sql = "{call p_security.p_emp_info(?,?)}";
			ocstmt = (OracleCallableStatement) conn.prepareCall(sql);
			ocstmt.setInt(1, empid);
			ocstmt.registerOutParameter(2, OracleTypes.CURSOR);
			ocstmt.execute();

			ors = (OracleResultSet) ocstmt.getCursor(2);

			while (ors.next()) {
				emp.setEmployeeId(ors.getInt(1));

				emp.setFirstName(ors.getString(2));
				if (ors.wasNull())
					emp.setFirstName("");

				emp.setLastName(ors.getString(3));

				emp.setEmail(ors.getString(4));

				emp.setPhoneNumber(ors.getString(5));
				if (ors.wasNull())
					emp.setPhoneNumber("empty");

				emp.setHireDate(ors.getDate(6));

				emp.setJobId(ors.getString(7));

				emp.setSalary(ors.getDouble(8));

				emp.setCommission(ors.getDouble(9));

				emp.setManagerId(ors.getInt(10));

				emp.setDepartment_id(ors.getInt(11));
			}

			// Print warning if there is any
			JDBCUtilities.printWarnings(ocstmt.getWarnings());

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (ors != null)
					ors.close();
				if (ocstmt != null)
					ocstmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

		return emp;

	}

	public static int updateEmployee(Employee emp) {
		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		// integer which will be returned
		int updated = 0;
		try {
			// creating JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			String sql = "SELECT first_name,last_name, email,phone_number, job_id, salary, "
					+ "commission_pct, manager_id, department_id FROM employees WHERE employee_id =?";
			stmt = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_UPDATABLE);

			stmt.setInt(1, emp.getEmployeeId());
			rs = stmt.executeQuery();

			if (rs.next()) {
				rs.updateString("FIRST_NAME", emp.getFirstName());
				rs.updateString("LAST_NAME", emp.getLastName());
				rs.updateString("EMAIL", emp.getEmail());
				rs.updateString("PHONE_NUMBER", emp.getPhoneNumber());
				rs.updateString("JOB_ID", emp.getJobId());

				// Set the value of the fields to be null when the value is 0
				if (emp.getSalary() == 0) {
					rs.updateNull("SALARY");
				} else {
					rs.updateDouble("SALARY", emp.getSalary());
				}
				if (emp.getCommission() == 0) {
					rs.updateNull("COMMISSION_PCT");
				} else {
					rs.updateDouble("COMMISSION_PCT", emp.getCommission());
				}
				if (emp.getManagerId() == 0) {
					rs.updateNull("MANAGER_ID");
				} else {
					rs.updateInt("MANAGER_ID", emp.getManagerId());
				}
				if (emp.getDepartment_id() == 0) {
					rs.updateNull("DEPARTMENT_ID");
				} else {
					rs.updateInt("DEPARTMENT_ID", emp.getDepartment_id());
				}
				rs.updateRow();
				System.out.println("---------------------------");
				System.out.println(" 1 row updated");
				updated = 1;
				JDBCUtilities.printWarnings(stmt.getWarnings());
			}

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLIntegrityConstraintViolationException e) {
			System.err.println(e.getMessage());
		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}
		return updated;
	}

	public static int deleteEmployeeByID(int empid) {
		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		int nRows = 0;

		try {
			// create JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// create statement
			String sql = "DELETE FROM employees WHERE employee_id = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, empid);
			nRows = stmt.executeUpdate();
			if (nRows == 1) {
				System.out.println("---------------------------");
				System.out.println(nRows + " rows deleted");

			} else {
				System.out.println("---------------------------");
				System.err.println("No rows deleted");
			}

			// Print warning if there is any
			JDBCUtilities.printWarnings(stmt.getWarnings());

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

		return nRows;
	}

	public static boolean batchUpdate(String[] SQLs) {
		// declare objects for database connection and SQL statement
		JDBCUtilities jdbcUtilities = null;
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		boolean commited = false;
		int[] count = null;

		try {
			// create JDBCUtilities object which read the database connection and login
			// information from the file database.properties
			jdbcUtilities = new JDBCUtilities("database.properties");
			conn = jdbcUtilities.getConnection();
			// create statement
			stmt = conn.createStatement();
			conn.setAutoCommit(false);
			for (String sql : SQLs) {
				stmt.addBatch(sql);
			}

			count = stmt.executeBatch();
			conn.commit();
			commited = true;
			System.out.println("\n---------------Transaction commited---------------");
			// output the total number of affected rows
			System.out.println(IntStream.of(count).sum() + " rows affected");

			// Print warning if there is any
			JDBCUtilities.printWarnings(stmt.getWarnings());

		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e.getMessage());
		} catch (InvalidPropertiesFormatException e) {
			System.err.println("Invalid propertyes format: " + e.getMessage());
		} catch (IOException e) {
			System.err.println("Input/output error: " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Error: " + e.getMessage());
		} catch (BatchUpdateException e) {
			JDBCUtilities.printBatchUpdateException(e);
			try {
				conn.rollback();
			} catch (SQLException e1) {
				JDBCUtilities.printSQLException(e);
			}
			System.out.println("\n---------------Transaction rolled back---------------");

		} catch (SQLException e) {
			// call the static function printSQLException of class JDBCUtilities
			JDBCUtilities.printSQLException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();

			} catch (SQLException e) {
				JDBCUtilities.printSQLException(e);
			}
			JDBCUtilities.closeConnection(conn);
		}

		return commited;
	}

}
